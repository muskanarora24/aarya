{"version":3,"file":"static/js/622.edcdd72b.chunk.js","mappings":"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","sources":["components/Slideshow.jsx","components/ContinueWatch.jsx","components/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../node_modules/bootstrap/dist/js/bootstrap.bundle\";\nimport {Link} from 'react-router-dom';\n\nconst Slideshow = ({ data }) =>{\n    return(\n        <>\n        <div className=\"Slideshow\" >\n            <div id=\"carouselExampleIndicators\" class=\"carousel slide\" data-bs-ride=\"carousel\">\n                <div class=\"carousel-indicators\">\n                {data.map((type, index) => index === 0?\n                            <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to={index} className=\"active\" aria-current=\"true\" aria-label=\"Slide \"></button>\n                            :<button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to={index} aria-label=\"Slide \"></button>\n                        )}\n                </div>\n                <div class=\"carousel-inner\">\n                    {data.map((type, index) => index === 0?\n                                <div className=\"carousel-item active\">\n                                    <Link to={'/detail/'+type.id} >\n                                        <img src={type.full_width} height=\"500px\" class=\"d-block w-100\" alt=\"...\"/>\n                                    </Link>\n                                </div>:\n                                <div className=\"carousel-item \">\n                                    <Link to={'/detail/'+type.id} >\n                                        <img src={type.full_width} height=\"500px\" class=\"d-block w-100\" alt=\"...\"/>\n                                    </Link>\n                                </div>\n                        )}\n                </div>\n                <button className=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"prev\">\n                    <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n                    <span className=\"visually-hidden\">Previous</span>\n                </button>\n                <button className=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"next\">\n                    <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n                    <span className=\"visually-hidden\">Next</span>\n                </button>\n            </div>\n        </div>       \n        </>\n    )\n}\n\n\nexport default Slideshow;","import React, { useState, useEffect } from 'react';\nimport {Link} from 'react-router-dom';\nimport watch from '../images/watch3-icon.png';\n\nconst ContinueWatch = ({ data }) =>{\n    return(\n        <>\n            {data && data.length > 0 && (\n                <div className=\"relatedVid\">\n                    <div class=\"scroll-container\">\n                        <h4>Continue Watching</h4>\n                        {data.map((type, index) => (\n                            <div className=\"col-lg-2 col-md-12\" style={{ display: 'inline-block' }} key={index}>\n                                <div className=\"card movie-card\" style={{backgroundColor:'#040714'}}>\n                                    <Link to={'/detail/'+type.id}>\n                                        <img src={watch} className=\"continue-play\" alt=\"Play Icon\"/>\n                                        <img src={type.landscape} className=\"card-img-top\" alt=\"...\" loading=\"lazy\" style={{height:'130px'}}/>\n                                        <h6 style={{color:'white'}}>{type.name.substring(0, 25)}</h6>                               \n                                    </Link>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n\n\nexport default ContinueWatch;","import React, { useState, useEffect, useContext} from 'react';\nimport Slideshow from './Slideshow';\nimport ContinueWatch from './ContinueWatch';\nimport { Contextone } from './Context';\nimport MainCards from './MainCards';\nimport Moviecard from './Moviecard';\nimport {SyncLoader} from \"react-spinners\";\n\nconst Home = (props) => {\n    const url = props.location.pathname;\n    const parts = url.split('/');\n    console.log(parts[1])\n    const lastPart = parts.pop();\n    console.log(lastPart);\n\n    const [sectionlist, setSectionlist] = useState([]);\n    const [continueList, setContinueList] = useState([]);\n    const [banner, setBanner] = useState([]);\n    const [typeId, setTypeId] = useState(0);\n    const [isHomepage, setIsHomepage] = useState(1);\n    const [languageId, setLanguageId] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const countercontext = useContext(Contextone);\n\n    useEffect(() => {\n        let type_idd = 0;\n        let isHome = 1;\n        if (url !== '/') {\n            type_idd = lastPart;\n            isHome = 2;\n        }\n        setTypeId(type_idd);\n        setIsHomepage(isHome);\n    }, [lastPart]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n            try {\n                const apiUrl = process.env.REACT_APP_API_URL;\n                const response = await fetch(apiUrl+'/api/section_list', {\n                    method: 'POST',\n                    body: JSON.stringify({ type_id: typeId, is_home_page: isHomepage, language_id: languageId }),\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8',\n                    }\n                });\n                setLoading(false);\n                const data = await response.json();\n                setSectionlist(data.result);\n                setContinueList(data.continue_watching);\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        };\n\n        fetchData();\n    }, [typeId, isHomepage, languageId]);\n\n    useEffect(() => {\n        const fetchBanner = async () => {\n            setLoading(true);\n            try {\n                const apiUrl = process.env.REACT_APP_API_URL;\n                const response = await fetch(apiUrl+'/api/get_banner', {\n                    method: 'POST',\n                    body: JSON.stringify({ type_id: typeId, is_home_page: isHomepage, language_id: languageId}),\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8',\n                    }\n                });\n                setLoading(false);\n                const data = await response.json();\n                setBanner(data.result);\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        };\n\n        fetchBanner();\n    }, [typeId, isHomepage, languageId]);\n\n    return (\n        <>\n            <div>\n                {loading ? (\n                    <div className=\"loader-set\">\n                        <SyncLoader\n                            color={'#0000CD'}\n                            loading={loading}\n                            size={10}\n                            aria-label=\"Loading Spinner\"\n                            data-testid=\"loader\"\n                        />\n                    </div>\n                ) : (\n                    <div className=\"container-fluid\" >\n                        <div className=\"home-body\">\n                            <Slideshow data={banner} />\n                            {countercontext.isLogged ? <ContinueWatch data={continueList} /> :''}\n                            <Moviecard data={sectionlist} />\n                        </div>\n                    </div>\n                )}\n            </div>\n        </>\n        \n    );\n};\n\nexport default Home;"],"names":["_ref","data","_jsx","_Fragment","children","className","_jsxs","id","class","map","type","index","Link","to","src","full_width","height","alt","length","style","display","backgroundColor","watch","landscape","loading","color","name","substring","props","url","location","pathname","parts","split","console","log","lastPart","pop","sectionlist","setSectionlist","useState","continueList","setContinueList","banner","setBanner","typeId","setTypeId","isHomepage","setIsHomepage","languageId","setLanguageId","setLoading","countercontext","useContext","Contextone","useEffect","type_idd","isHome","async","apiUrl","process","response","fetch","method","body","JSON","stringify","type_id","is_home_page","language_id","headers","json","result","continue_watching","error","fetchData","fetchBanner","SyncLoader","size","Slideshow","isLogged","ContinueWatch","Moviecard"],"sourceRoot":""}