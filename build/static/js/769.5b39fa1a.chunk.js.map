{"version":3,"file":"static/js/769.5b39fa1a.chunk.js","mappings":"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","sources":["../node_modules/react-hover-video-player/src/HoverVideoPlayer.tsx","../node_modules/react-spinners/esm/helpers/unitConverter.js","../node_modules/react-spinners/esm/SyncLoader.js","../node_modules/react-spinners/esm/helpers/animation.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\n\nimport {\n  expandToFillContainerStyle,\n  pausedOverlayWrapperSizingStyles,\n  videoSizingStyles,\n} from './HoverVideoPlayer.styles';\nimport {\n  HoverVideoPlayerProps,\n  VideoSource,\n  VideoSrcProp,\n  VideoCaptionsTrack,\n  VideoCaptionsProp,\n} from './HoverVideoPlayer.types';\n\n/**\n * @function  formatVideoSrc\n *\n * Takes a videoSrc value and formats it as an array of VideoSource objects which can be used to render\n * <source> elements for the video\n *\n * @param {VideoSrcProp}  videoSrc - Source(s) to format into VideoSource objects so they can be added to the video player.\n *\n * @returns {VideoSource[]} Array of formatted VideoSource objects which can be used to render <source> elements for the video\n */\nfunction formatVideoSrc(videoSrc: VideoSrcProp): VideoSource[] {\n  const formattedVideoSources = [];\n\n  if (videoSrc == null) {\n    // A videoSrc value is required in order to make the video player work\n    console.error(\n      \"Error: 'videoSrc' prop is required for HoverVideoPlayer component\"\n    );\n  } else {\n    // Make sure we can treat the videoSrc value as an array\n    const rawVideoSources = Array.isArray(videoSrc) ? videoSrc : [videoSrc];\n\n    // Parse our video source values into an array of VideoSource objects that can be used to render sources for the video\n    for (\n      let i = 0, numSources = rawVideoSources.length;\n      i < numSources;\n      i += 1\n    ) {\n      const source = rawVideoSources[i];\n\n      if (typeof source === 'string') {\n        // If the source is a string, it's an src URL so format it into a VideoSource object and add it to the array\n        formattedVideoSources.push({ src: source });\n      } else if (source && source.src) {\n        // If the source is an object with an src, just add it to the array\n        formattedVideoSources.push({ src: source.src, type: source.type });\n      } else {\n        // Log an error if one of the videoSrc values is invalid\n        console.error(\n          \"Error: invalid value provided to HoverVideoPlayer prop 'videoSrc':\",\n          source\n        );\n      }\n    }\n  }\n\n  return formattedVideoSources;\n}\n\n/**\n * @function formatVideoCaptions\n *\n * Takes a videoCaptions value and formats it as an array of VideoCaptionsTrack objects which can be used to render\n * <track> elements for the video\n *\n * @param {VideoCaptionsProp} videoCaptions - Captions track(s) to use for the video player for accessibility.\n *\n * @returns {VideoCaptionsTrack[]}  Array of formatted VideoCaptionsTrack objects which can be used to render <track> elements for the video\n */\nfunction formatVideoCaptions(\n  videoCaptions: VideoCaptionsProp\n): VideoCaptionsTrack[] {\n  const formattedVideoCaptions = [];\n\n  // If captions were provided, format them for use for the video\n  if (videoCaptions != null) {\n    // Make sure we can treat the videoCaptions value as an array\n    const rawVideoCaptions = Array.isArray(videoCaptions)\n      ? videoCaptions\n      : [videoCaptions];\n\n    // Parse our raw video captions values into an array of formatted VideoCaptionsTrack\n    // objects that can be used to render caption tracks for the video\n    for (\n      let i = 0, numCaptions = rawVideoCaptions.length;\n      i < numCaptions;\n      i += 1\n    ) {\n      const captions = rawVideoCaptions[i];\n\n      if (captions && captions.src) {\n        formattedVideoCaptions.push({\n          src: captions.src,\n          srcLang: captions.srcLang,\n          label: captions.label,\n          default: Boolean(captions.default),\n        });\n      } else {\n        // Log an error if one of the videoCaptions values is invalid\n        console.error(\n          \"Error: invalid value provided to HoverVideoPlayer prop 'videoCaptions'\",\n          captions\n        );\n      }\n    }\n  }\n\n  return formattedVideoCaptions;\n}\n\n// Enumerates states that the hover player's overlay can be in\nenum OverlayState {\n  // Only the paused overlay is visible, if provided\n  paused = 'paused',\n  // Both the paused and loading overlays are visible, if provided\n  loading = 'loading',\n  // No overlays are visible\n  playing = 'playing',\n}\n\n/**\n * @component HoverVideoPlayer\n * @license MIT\n *\n * @param {HoverVideoPlayerProps} props\n */\nconst HoverVideoPlayer = ({\n  videoSrc,\n  videoCaptions = null,\n  focused = false,\n  disableDefaultEventHandling = false,\n  hoverTargetRef = null,\n  hoverTarget = null,\n  pausedOverlay = null,\n  loadingOverlay = null,\n  loadingStateTimeout = 200,\n  overlayTransitionDuration = 400,\n  restartOnPaused = false,\n  unloadVideoOnPaused = false,\n  muted = true,\n  volume = 1,\n  loop = true,\n  preload = null,\n  crossOrigin = 'anonymous',\n  controls = false,\n  controlsList = null,\n  disableRemotePlayback = true,\n  disablePictureInPicture = true,\n  className = null,\n  style = null,\n  pausedOverlayWrapperClassName = null,\n  pausedOverlayWrapperStyle = null,\n  loadingOverlayWrapperClassName = null,\n  loadingOverlayWrapperStyle = null,\n  videoId = null,\n  videoClassName = null,\n  videoRef: forwardedVideoRef = null,\n  videoStyle = null,\n  sizingMode = 'video',\n}: HoverVideoPlayerProps): JSX.Element => {\n  // Keep track of whether the user is hovering over the video and it should therefore be playing or not\n  const [isHoveringOverVideo, setIsHoveringOverVideo] = useState(false);\n  // Keep track of how the paused and loading overlays should be displayed\n  const [overlayState, setOverlayState] = useState(OverlayState.paused);\n  const [isVideoPaused, setIsVideoPaused] = useState(true);\n\n  // Keep a ref for all state variables related to the video's state\n  // which need to be managed asynchronously as it attempts to play/pause\n  const mutableVideoState = useRef(null);\n\n  if (mutableVideoState.current === null) {\n    // Set initial values for our video state\n    mutableVideoState.current = {\n      // Whether there is a play promise in progress which we should avoid interrupting\n      // with calls to video.play() or video.load()\n      isPlayAttemptInProgress: false,\n      // Keep refs for timeouts so we can keep track of and cancel them\n      pauseTimeout: null,\n      loadingStateTimeout: null,\n      // Keep track of the video time that we should start from when the video is played again\n      // This is particularly useful so we can restore our previous place in the video even if\n      // we are unloading it every time it gets paused\n      videoTimeToRestore: 0,\n    };\n  }\n\n  // Element refs\n  const containerRef = useRef(null);\n  const videoRef = useRef(null);\n\n  // Forward out local videoRef along to the videoRef prop\n  useImperativeHandle(forwardedVideoRef, () => videoRef.current);\n\n  const hasPausedOverlay = Boolean(pausedOverlay);\n  const hasLoadingOverlay = Boolean(loadingOverlay);\n\n  // We should attempt to play the video if the user is hovering over it or the `focused` override prop is enabled\n  const shouldPlayVideo = isHoveringOverVideo || focused;\n\n  /* ~~~~ EFFECTS ~~~~ */\n  // Effect starts and stops the video depending on the current value for `shouldPlayVideo`\n  useEffect(\n    () => {\n      const videoElement = videoRef.current;\n\n      // The video is stopped if it is paused or ended\n      const isVideoStopped = videoElement.paused || videoElement.ended;\n\n      // If shouldPlayVideo is true, attempt to start playing the video\n      if (shouldPlayVideo) {\n        // readyState 3 is HAVE_FUTURE_DATA, meaning the video has loaded enough data that it can play\n        const isVideoLoadedEnoughToPlay = videoElement.readyState >= 3;\n\n        // If the video is stopped or still loading and we have a loading overlay,\n        // set a timeout to display the overlay if the video doesn't finish loading\n        // after a certain amount of time\n        if (\n          (isVideoStopped || !isVideoLoadedEnoughToPlay) &&\n          hasLoadingOverlay\n        ) {\n          // If we have a loading overlay, set a timeout to start showing it if the video doesn't start playing\n          // before the loading state timeout has elapsed\n          mutableVideoState.current.loadingStateTimeout = setTimeout(() => {\n            // If this timeout wasn't cancelled, we're still trying to play the video\n            // and it's still loading, so fade in the loading overlay\n            setOverlayState(OverlayState.loading);\n          }, loadingStateTimeout);\n        }\n\n        // If the video is fully stopped, we need to attempt to start it by calling play()\n        if (isVideoStopped) {\n          // Ensure we're at the correct time to start playing from\n          videoElement.currentTime =\n            mutableVideoState.current.videoTimeToRestore;\n\n          // Start attempting to play\n          videoElement.play();\n        } else if (isVideoLoadedEnoughToPlay) {\n          // If the video isn't stopped and is loaded enough to play. it's already playing,\n          // so ensure the overlays are hidden to reflect that!\n          setOverlayState(OverlayState.playing);\n        }\n      }\n      // Otherwise if shouldPlayVideo is false, go through the process necessary to pause the video\n      else {\n        // Start fading the paused overlay back in\n        setOverlayState(OverlayState.paused);\n\n        // Only proceed to pause the video if it's not already paused\n        if (!isVideoStopped) {\n          const pauseVideo = () => {\n            // If there isn't a play attempt in progress and the video can therefore\n            //  safely be paused right away, do it!\n            // Otherwise, we'll have to wait for the logic in the video's `onPlaying` event\n            // to immediately pause the video as soon as it starts playing, or else we will end up\n            // getting an error for interrupting the play promise\n            if (!mutableVideoState.current.isPlayAttemptInProgress) {\n              videoElement.pause();\n            }\n          };\n\n          if (hasPausedOverlay) {\n            // If we have a paused overlay, set a timeout with a duration of the overlay's fade\n            // transition since we want to keep the video playing until the overlay has fully\n            // faded in and hidden it.\n            mutableVideoState.current.pauseTimeout = setTimeout(\n              pauseVideo,\n              overlayTransitionDuration\n            );\n          } else {\n            // If we don't have a paused overlay, pause right away!\n            pauseVideo();\n          }\n        }\n      }\n\n      return () => {\n        // On cleanup, clear any outstanding timeouts since our playback state is changing\n        // or the component is unmounting\n        clearTimeout(mutableVideoState.current.pauseTimeout);\n        clearTimeout(mutableVideoState.current.loadingStateTimeout);\n      };\n    },\n    // Only run the effect when shouldPlayVideo changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [shouldPlayVideo]\n  );\n\n  // If the video's sources should be unloaded when it's paused, the video is paused, AND we're not currently\n  // trying to play, we can unload the video's sources\n  const isVideoUnloaded =\n    unloadVideoOnPaused && isVideoPaused && !shouldPlayVideo;\n\n  // Effect ensures the video element fully unloads after its <source> tags were removed\n  useEffect(() => {\n    if (isVideoUnloaded) {\n      // Since the video's sources have changed, perform a manual load to update\n      // or unload the video's current source\n      videoRef.current.load();\n    }\n  }, [isVideoUnloaded]);\n\n  // Effect adds hover event listeners to the appropriate hover target element so it will start and stop as the user interacts with it\n  useEffect(() => {\n    // If default event handling is disabled, we shouldn't check for touch events outside of the player\n    if (disableDefaultEventHandling) return undefined;\n\n    // Get the element that we should add our hover event listeners to\n    let hoverEventTargetElement: Node;\n\n    if (hoverTarget) {\n      // If the `hoverTarget` prop was provided, it could be a function, a DOM element, or a React ref, so\n      // figure out which one it is and get the hover target element out of it accordingly\n      if (typeof hoverTarget === 'function') {\n        hoverEventTargetElement = hoverTarget();\n      } else if (hoverTarget instanceof Node) {\n        hoverEventTargetElement = hoverTarget;\n      } else if (hoverTarget.current) {\n        hoverEventTargetElement = hoverTarget.current;\n      }\n    } else if (hoverTargetRef) {\n      // Log a warning for legacy usage of the `hoverTargetRef` prop\n      console.warn(\n        'The `hoverTargetRef` prop is deprecated in favor of `hoverTarget` and will be removed in the next major version of `react-hover-video-player`. To migrate, simply rename the prop to `hoverTarget` and it should continue working as intended.'\n      );\n      hoverEventTargetElement = hoverTargetRef.current;\n    } else {\n      // If no prop was provided to specify a hover target, default to using HoverVideoPlayer's container element\n      hoverEventTargetElement = containerRef.current;\n    }\n\n    // If we weren't able to get a valid hover target to attach event listeners to, return early\n    if (!hoverEventTargetElement || !hoverEventTargetElement.addEventListener) {\n      console.error(\n        'HoverVideoPlayer was unable to add event listeners to a hover target. Please check your usage of the `hoverTarget` prop.'\n      );\n      return undefined;\n    }\n\n    // Add the event listeners\n    const onHoverStart = () => setIsHoveringOverVideo(true);\n    const onHoverEnd = () => setIsHoveringOverVideo(false);\n\n    // Mouse events\n    hoverEventTargetElement.addEventListener('mouseenter', onHoverStart);\n    hoverEventTargetElement.addEventListener('mouseleave', onHoverEnd);\n\n    // Focus/blur\n    hoverEventTargetElement.addEventListener('focus', onHoverStart);\n    hoverEventTargetElement.addEventListener('blur', onHoverEnd);\n\n    // Touch events\n    const touchStartListenerOptions = { passive: true };\n\n    hoverEventTargetElement.addEventListener(\n      'touchstart',\n      onHoverStart,\n      touchStartListenerOptions\n    );\n    // Event listener pauses the video when the user touches somewhere outside of the player\n    const onWindowTouchStart = (event: TouchEvent) => {\n      if (\n        !(event.target instanceof Node) ||\n        !hoverEventTargetElement.contains(event.target)\n      ) {\n        onHoverEnd();\n      }\n    };\n\n    window.addEventListener(\n      'touchstart',\n      onWindowTouchStart,\n      touchStartListenerOptions\n    );\n\n    // Return a cleanup function that removes all event listeners\n    return () => {\n      hoverEventTargetElement.removeEventListener('mouseenter', onHoverStart);\n      hoverEventTargetElement.removeEventListener('mouseleave', onHoverEnd);\n      hoverEventTargetElement.removeEventListener('focus', onHoverStart);\n      hoverEventTargetElement.removeEventListener('blur', onHoverEnd);\n      hoverEventTargetElement.removeEventListener('touchstart', onHoverStart);\n      window.removeEventListener('touchstart', onWindowTouchStart);\n    };\n  }, [disableDefaultEventHandling, hoverTarget, hoverTargetRef]);\n\n  // Effect sets attributes on the video which can't be done via props\n  useEffect(() => {\n    const videoElement = videoRef.current;\n\n    // Manually setting the `muted` attribute on the video element via an effect in order\n    // to avoid a know React issue with the `muted` prop not applying correctly on initial render\n    // https://github.com/facebook/react/issues/10389\n    videoElement.muted = muted;\n    // Set the video's volume to match the `volume` prop\n    // Note that this will have no effect if the `muted` prop is set to true\n    videoElement.volume = volume;\n    // React does not support directly setting disableRemotePlayback or disablePictureInPicture directly\n    // via the video element's props, so make sure we manually set them in an effect\n    videoElement.disableRemotePlayback = disableRemotePlayback;\n    videoElement.disablePictureInPicture = disablePictureInPicture;\n  }, [disablePictureInPicture, disableRemotePlayback, muted, volume]);\n  /* ~~~~ END EFFECTS ~~~~ */\n\n  const isPausedOverlayVisible = overlayState !== OverlayState.playing;\n  const isLoadingOverlayVisibile = overlayState === OverlayState.loading;\n\n  // Parse the sources and captions into formatted arrays that we can use to\n  // render <source> and <track> elements for the video\n  const formattedVideoSources = useMemo(() => formatVideoSrc(videoSrc), [\n    videoSrc,\n  ]);\n  const formattedVideoCaptions = useMemo(\n    () => formatVideoCaptions(videoCaptions),\n    [videoCaptions]\n  );\n\n  return (\n    <div\n      data-testid=\"hover-video-player-container\"\n      ref={containerRef}\n      className={className}\n      style={{\n        position: 'relative',\n        ...style,\n      }}\n    >\n      {hasPausedOverlay && (\n        <div\n          style={{\n            ...pausedOverlayWrapperSizingStyles[sizingMode],\n            zIndex: 1,\n            opacity: isPausedOverlayVisible ? 1 : 0,\n            transition: `opacity ${overlayTransitionDuration}ms`,\n            // Disable pointer events on the paused overlay when it's hidden\n            pointerEvents: isPausedOverlayVisible ? 'auto' : 'none',\n            ...pausedOverlayWrapperStyle,\n          }}\n          className={pausedOverlayWrapperClassName}\n          data-testid=\"paused-overlay-wrapper\"\n        >\n          {pausedOverlay}\n        </div>\n      )}\n      {hasLoadingOverlay && (\n        <div\n          style={{\n            ...expandToFillContainerStyle,\n            zIndex: 2,\n            opacity: isLoadingOverlayVisibile ? 1 : 0,\n            transition: `opacity ${overlayTransitionDuration}ms`,\n            // Disable pointer events on the loading overlay when it's hidden\n            pointerEvents: isLoadingOverlayVisibile ? 'auto' : 'none',\n            ...loadingOverlayWrapperStyle,\n          }}\n          className={loadingOverlayWrapperClassName}\n          data-testid=\"loading-overlay-wrapper\"\n        >\n          {loadingOverlay}\n        </div>\n      )}\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      <video\n        loop={loop}\n        playsInline\n        preload={preload}\n        crossOrigin={crossOrigin}\n        ref={videoRef}\n        style={{\n          ...videoSizingStyles[sizingMode],\n          objectFit: 'cover',\n          ...videoStyle,\n        }}\n        controls={controls}\n        controlsList={controlsList}\n        className={videoClassName}\n        id={videoId}\n        onError={() => {\n          // Event fired when an error occurred on the video element, usually because something went wrong\n          // when attempting to load its source\n          console.error(\n            `HoverVideoPlayer encountered an error for src \"${videoRef.current.currentSrc}\".`\n          );\n        }}\n        onPlay={() => {\n          // Mark that we now have a play attempt in progress which shouldn't be interrupted\n          mutableVideoState.current.isPlayAttemptInProgress = true;\n          // The video is no longer paused\n          setIsVideoPaused(false);\n        }}\n        onPlaying={() => {\n          // Cancel any state timeouts that may be pending\n          clearTimeout(mutableVideoState.current.pauseTimeout);\n          clearTimeout(mutableVideoState.current.loadingStateTimeout);\n\n          // The play attempt is now complete\n          mutableVideoState.current.isPlayAttemptInProgress = false;\n\n          if (shouldPlayVideo) {\n            // Hide the overlays to reveal the video now that it's playing\n            setOverlayState(OverlayState.playing);\n          } else {\n            // If the play attempt just succeeded but we no longer want to play the video,\n            // pause it immediately!\n            videoRef.current.pause();\n          }\n        }}\n        onPause={() => {\n          // Cancel any state timeouts that may be pending\n          clearTimeout(mutableVideoState.current.pauseTimeout);\n          clearTimeout(mutableVideoState.current.loadingStateTimeout);\n\n          if (restartOnPaused) {\n            // If we should restart the video when paused, reset its time to the beginning\n            videoRef.current.currentTime = 0;\n          }\n\n          // Hang onto the time that the video is currently at so we can\n          // restore it when we try to play again\n          // This is mainly helpful because the unloadVideoOnPaused prop will cause\n          // the video's currentTime to be cleared every time its sources are unloaded\n          // after pausing\n          mutableVideoState.current.videoTimeToRestore =\n            videoRef.current.currentTime;\n\n          // Update that the video is now paused\n          setIsVideoPaused(true);\n        }}\n        data-testid=\"video-element\"\n      >\n        {!isVideoUnloaded &&\n          // Only render sources for the video if it is not unloaded\n          formattedVideoSources.map(({ src, type }) => (\n            <source key={src} src={src} type={type} />\n          ))}\n        {formattedVideoCaptions.map(\n          ({ src, srcLang, label, default: isDefault }) => (\n            <track\n              key={src}\n              kind=\"captions\"\n              src={src}\n              srcLang={srcLang}\n              label={label}\n              default={isDefault}\n            />\n          )\n        )}\n      </video>\n    </div>\n  );\n};\n\nexport default HoverVideoPlayer;\n","var cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true,\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nexport function parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\",\n        };\n    }\n    var value;\n    var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit,\n        };\n    }\n    console.warn(\"React Spinners: \".concat(size, \" is not a valid css value. Defaulting to \").concat(value, \"px.\"));\n    return {\n        value: value,\n        unit: \"px\",\n    };\n}\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nexport function cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\".concat(lengthWithunit.value).concat(lengthWithunit.unit);\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { createAnimation } from \"./helpers/animation\";\nimport { cssValue } from \"./helpers/unitConverter\";\nvar sync = createAnimation(\"SyncLoader\", \"33% {transform: translateY(10px)}\\n  66% {transform: translateY(-10px)}\\n  100% {transform: translateY(0)}\", \"sync\");\nfunction SyncLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.size, size = _f === void 0 ? 15 : _f, _g = _a.margin, margin = _g === void 0 ? 2 : _g, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\", \"margin\"]);\n    var wrapper = __assign({ display: \"inherit\" }, cssOverride);\n    var style = function (i) {\n        return {\n            backgroundColor: color,\n            width: cssValue(size),\n            height: cssValue(size),\n            margin: cssValue(margin),\n            borderRadius: \"100%\",\n            display: \"inline-block\",\n            animation: \"\".concat(sync, \" \").concat(0.6 / speedMultiplier, \"s \").concat(i * 0.07, \"s infinite ease-in-out\"),\n            animationFillMode: \"both\",\n        };\n    };\n    if (!loading) {\n        return null;\n    }\n    return (React.createElement(\"span\", __assign({ style: wrapper }, additionalprops),\n        React.createElement(\"span\", { style: style(1) }),\n        React.createElement(\"span\", { style: style(2) }),\n        React.createElement(\"span\", { style: style(3) })));\n}\nexport default SyncLoader;\n","export var createAnimation = function (loaderName, frames, suffix) {\n    var animationName = \"react-spinners-\".concat(loaderName, \"-\").concat(suffix);\n    if (typeof window == \"undefined\" || !window.document) {\n        return animationName;\n    }\n    var styleEl = document.createElement(\"style\");\n    document.head.appendChild(styleEl);\n    var styleSheet = styleEl.sheet;\n    var keyFrames = \"\\n    @keyframes \".concat(animationName, \" {\\n      \").concat(frames, \"\\n    }\\n  \");\n    if (styleSheet) {\n        styleSheet.insertRule(keyFrames, 0);\n    }\n    return animationName;\n};\n"],"names":["OverlayState","cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","cssValue","value","lengthWithunit","size","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","concat","parseLengthAndUnit","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","sync","loaderName","frames","suffix","animationName","window","document","styleEl","createElement","head","appendChild","styleSheet","sheet","keyFrames","insertRule","createAnimation","_a","_b","loading","_c","color","_d","speedMultiplier","_e","cssOverride","_f","_g","margin","additionalprops","wrapper","display","style","backgroundColor","width","height","borderRadius","animation","animationFillMode","React"],"sourceRoot":""}